# Prompt for Building a Next.js Brewing Dashboard and Blog

## Project Goal

Your task is to build a complete Next.js application for a homebrewing group called the "Prefab Brew Crew". The application serves as both a public-facing dashboard to show the status of their current beer brewing process and a blog to document their brewing adventures. It also includes a password-protected admin panel for managing blog posts and triggering AI-powered content generation.

## Technology Stack

*   **Framework:** Next.js with the App Router
*   **Language:** TypeScript
*   **Styling:** Tailwind CSS
*   **UI Components:** ShadCN/UI. Use the existing components as a base. The theme is already configured in `src/app/globals.css`.
*   **AI Functionality:** Genkit for generating blog posts and images.
*   **Authentication:** JWT-based sessions stored in `httpOnly` cookies.

## Core Features

### 1. Public-Facing Site
*   **Home Page (`/`)**: Displays a dashboard with the current brewing status (Brew Kettle and Fermenter data). It also shows the 3 most recent blog posts.
*   **Blog Page (`/blog`)**: Displays all blog posts in a grid format.
*   **Blog Post Detail Page (`/blog/[id]`)**: Shows the full content of a single blog post.

### 2. Authentication
*   **Login Page (`/login`)**: A simple form with a password field.
*   **Middleware (`/src/middleware.ts`)**: Protects all routes under `/admin`. If a user is not logged in, they are redirected to `/login`. If a logged-in user tries to access `/login`, they are redirected to `/admin`.
*   **Session Management**: Handled in `src/lib/auth.ts` using `jose` for JWTs. All authentication-related actions (login, logout) are handled by API Route Handlers.

### 3. Admin Panel (`/admin`)
*   **Admin Dashboard**: Similar to the public dashboard but includes an "editable" fermenter card where the admin can change the beer type.
*   **AI Blog Post Generation**: A button on the "Batch Info" card triggers a Genkit flow (`generate-blog-post-flow.ts`) that uses the current brewing data to generate a complete blog post (title, summary, content, and a generated image). On success, it redirects the admin to the newly created post.
*   **Blog Management**: A table lists all blog posts with options to **Create**, **Edit**, and **Delete**.
    *   **Create/Edit Form**: A form for creating a new post or editing an existing one.
    *   **Delete Action**: A confirmation dialog before deleting a post.
*   **API-Driven Mutations**: All create, update, and delete actions are handled via API Route Handlers (e.g., `/api/posts`) to ensure they work reliably.

## Project File Structure & Code

Below is the complete code for every file in the project. Use this as the source of truth to construct the application.

---

### `.env`
```
# This file is intentionally left blank.
```

### `apphosting.yaml`
```yaml
# Settings to manage and configure a Firebase App Hosting backend.
# https://firebase.google.com/docs/app-hosting/configure

runConfig:
  # Increase this value if you'd like to automatically spin up
  # more instances in response to increased traffic.
  maxInstances: 1
```

### `components.json`
```json
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
```

### `next.config.ts`
```ts
import type {NextConfig} from 'next';

const nextConfig: NextConfig = {
  /* config options here */
  typescript: {
    ignoreBuildErrors: true,
  },
  eslint: {
    ignoreDuringBuilds: true,
  },
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'placehold.co',
        port: '',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'images.unsplash.com',
        port: '',
        pathname: '/**',
      },
    ],
  },
};

export default nextConfig;
```

### `package.json`
```json
{
  "name": "nextn",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "genkit:dev": "genkit start -- tsx src/ai/dev.ts",
    "genkit:watch": "genkit start -- tsx --watch src/ai/dev.ts",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "@genkit-ai/googleai": "^1.13.0",
    "@genkit-ai/next": "^1.13.0",
    "@hookform/resolvers": "^4.1.3",
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-menubar": "^1.1.6",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slider": "^1.2.3",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-toast": "^1.2.6",
    "@radix-ui/react-tooltip": "^1.1.8",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^3.6.0",
    "dotenv": "^16.5.0",
    "embla-carousel-react": "^8.6.0",
    "firebase": "^11.9.1",
    "genkit": "^1.13.0",
    "jose": "^5.6.3",
    "lucide-react": "^0.475.0",
    "next": "15.3.3",
    "next-themes": "^0.3.0",
    "patch-package": "^8.0.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.54.2",
    "recharts": "^2.15.1",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@tailwindcss/typography": "^0.5.13",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "genkit-cli": "^1.13.0",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}
```

### `README.md`
```md
# Firebase Studio

This is a NextJS starter in Firebase Studio.

To get started, take a look at src/app/page.tsx.
```

### `tailwind.config.ts`
```ts
import type {Config} from 'tailwindcss';

export default {
  darkMode: ['class'],
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    container: {
      center: true,
      padding: "1.5rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      fontFamily: {
        body: ['Inter', 'sans-serif'],
        headline: ['Space Grotesk', 'sans-serif'],
        code: ['monospace'],
      },
      colors: {
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        chart: {
          '1': 'hsl(var(--chart-1))',
          '2': 'hsl(var(--chart-2))',
          '3': 'hsl(var(--chart-3))',
          '4': 'hsl(var(--chart-4))',
          '5': 'hsl(var(--chart-5))',
        },
        sidebar: {
          DEFAULT: 'hsl(var(--sidebar-background))',
          foreground: 'hsl(var(--sidebar-foreground))',
          primary: 'hsl(var(--sidebar-primary))',
          'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
          accent: 'hsl(var(--sidebar-accent))',
          'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
          border: 'hsl(var(--sidebar-border))',
          ring: 'hsl(var(--sidebar-ring))',
        },
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      keyframes: {
        'accordion-down': {
          from: {
            height: '0',
          },
          to: {
            height: 'var(--radix-accordion-content-height)',
          },
        },
        'accordion-up': {
          from: {
            height: 'var(--radix-accordion-content-height)',
          },
          to: {
            height: '0',
          },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
      },
    },
  },
  plugins: [require('tailwindcss-animate'), require("@tailwindcss/typography")],
} satisfies Config;
```

### `tsconfig.json`
```json
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
```

### `src/middleware.ts`
```ts
import { NextResponse, type NextRequest } from 'next/server';
import { decrypt } from '@/lib/auth';

export async function middleware(request: NextRequest) {
  const path = request.nextUrl.pathname;
  const sessionToken = request.cookies.get('session')?.value;

  const isApiRoute = path.startsWith('/api/');
  const isStaticAsset = path.startsWith('/_next/static') || path.startsWith('/_next/image') || path.includes('favicon.ico');

  // Skip middleware for API routes and static assets
  if (isApiRoute || isStaticAsset) {
    return NextResponse.next();
  }

  // --- Rule 1: Protect /admin routes ---
  if (path.startsWith('/admin')) {
    // If there's no session token, redirect to login immediately.
    if (!sessionToken) {
      return NextResponse.redirect(new URL('/login', request.url));
    }
    try {
      // Decrypt the token to see if it's a valid session.
      const session = await decrypt(sessionToken);
      if (!session?.user) {
        // The token was invalid or expired, so redirect to login.
        return NextResponse.redirect(new URL('/login', request.url));
      }
    } catch (e) {
      // An error occurred during decryption, treat as unauthenticated.
      return NextResponse.redirect(new URL('/login', request.url));
    }
    // If we reach here, the user has a valid session. Allow access.
    return NextResponse.next();
  }

  // --- Rule 2: Handle the /login page ---
  if (path === '/login') {
    // If a valid session exists, redirect the user away from the login page.
    if (sessionToken) {
      try {
        const session = await decrypt(sessionToken);
        if (session?.user) {
          // User is already logged in, send them to the admin dashboard.
          return NextResponse.redirect(new URL('/admin', request.url));
        }
      } catch (e) {
        // Token is invalid, so do nothing and let them view the login page.
      }
    }
    // If there's no token or it's invalid, allow access to the login page.
    return NextResponse.next();
  }

  // --- Rule 3: For all other public pages, do nothing. ---
  return NextResponse.next();
}

export const config = {
  // Run middleware on all paths except for internal Next.js assets.
  matcher: ['/((?!_next/static|_next/image|favicon.ico).*)'],
};
```

### `src/lib/auth.ts`
```ts
'use server';

import { SignJWT, jwtVerify } from 'jose';
import { cookies } from 'next/headers';

const SECRET_KEY_STRING = "a-very-secure-secret-key-that-is-at-least-32-chars-long";
const SECRET_KEY = new TextEncoder().encode(SECRET_KEY_STRING);

export async function encrypt(payload: any) {
  return await new SignJWT(payload)
    .setProtectedHeader({ alg: 'HS256' })
    .setIssuedAt()
    .setExpirationTime('2h')
    .sign(SECRET_KEY);
}

export async function decrypt(token: string): Promise<any> {
  if (!token) return null;
  try {
    const { payload } = await jwtVerify(token, SECRET_KEY, {
      algorithms: ['HS256'],
    });
    return payload;
  } catch (e) {
    console.error("JWT Verification Failed:", e);
    return null;
  }
}

// Login is now handled by the API route at /api/login

// This function ONLY clears the cookie. The redirect is handled by the caller (e.g., an API route).
export async function logout() {
  cookies().set('session', '', {
    maxAge: 0,
    path: '/',
    httpOnly: true,
    sameSite: 'lax',
    secure: process.env.NODE_ENV === 'production',
  });
}

export async function getSession() {
  const sessionCookie = cookies().get('session')?.value;
  if (!sessionCookie) return null;

  return await decrypt(sessionCookie);
}
```

### `src/lib/utils.ts`
```ts
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
```

### `src/services/brewing-service.ts`
```ts
'use server';

export interface BrewKettleData {
  temperature: number;
  measuredTemperature: number;
  mode: string;
  power: number;
  timeElapsed: string;
}

export interface FermenterData {
  temperature: number;
  gravity: number;
  beerType: string;
  timeRemaining: string;
  totalLiters: number;
  progress: number;
}

export interface BatchInfoData {
  batchId: string;
  startDate: string;
  endDate: string;
}

// In-memory store for editable data
let currentBeerType: string = 'NEIPA';

export async function getBeerType(): Promise<string> {
  return currentBeerType;
}

export async function setBeerType(newType: string): Promise<void> {
  // In a real app, you'd perform validation and save to a DB
  console.log(`Updating beer type to: ${newType}`);
  currentBeerType = newType;
}

// Mock data for when API fails or keys are not set
const mockBrewKettleData: BrewKettleData = {
  temperature: 100.1,
  measuredTemperature: 99.8,
  mode: 'Boil',
  power: 5000,
  timeElapsed: '00:45:12',
};

const mockFermenterData: FermenterData = {
  temperature: 19.5,
  gravity: 1.012,
  beerType: 'NEIPA', // This will be replaced
  timeRemaining: '3 dager 4 timer',
  totalLiters: 25,
  progress: 70,
};

const mockBatchInfoData: BatchInfoData = {
  batchId: 'PBC-042-NEIPA',
  startDate: '2024-07-15',
  endDate: '2024-08-01',
};

const RAPT_API_KEY = process.env.RAPT_API_KEY;
const RAPT_HYDROMETER_ID = process.env.RAPT_HYDROMETER_ID;
const RAPT_CHAMBER_ID = process.env.RAPT_CHAMBER_ID;

const hasRaptConfig = RAPT_API_KEY && RAPT_API_KEY !== 'YOUR_RAPT_API_KEY_HERE';

async function raptFetch(endpoint: string) {
  try {
    const res = await fetch(`https://api.rapt.io/v2/${endpoint}`, {
      headers: {
        'x-api-key': RAPT_API_KEY!,
      },
      // Using Next.js revalidation to cache for 60 seconds
      next: { revalidate: 60 },
    });

    if (!res.ok) {
      console.error(`RAPT API error for ${endpoint}: ${res.status} ${res.statusText}`);
      const errorBody = await res.text();
      console.error(`Error body: ${errorBody}`);
      return null;
    }

    return res.json();
  } catch (error) {
    console.error(`Failed to fetch from RAPT API endpoint ${endpoint}:`, error);
    return null;
  }
}

export async function getBrewKettleData(): Promise<BrewKettleData> {
  // NOTE: RAPT API does not have a "Brew Kettle". We are using the "Fermentation Chamber" as a stand-in.
  // Some fields will be mocked.
  if (!hasRaptConfig || !RAPT_CHAMBER_ID || RAPT_CHAMBER_ID === 'YOUR_CHAMBER_ID_HERE') {
    return mockBrewKettleData;
  }

  const data = await raptFetch(`chamber/${RAPT_CHAMBER_ID}`);

  if (!data) {
    return mockBrewKettleData;
  }

  return {
    temperature: data.targetTemp,
    measuredTemperature: data.temp,
    mode: data.mode,
    // Mocked data as these are not available from the chamber endpoint
    power: 5000,
    timeElapsed: '00:45:12',
  };
}

export async function getFermenterData(): Promise<FermenterData> {
  const beerType = await getBeerType();
  // NOTE: Some fields are mocked as they are not available from the hydrometer endpoint.
  if (!hasRaptConfig || !RAPT_HYDROMETER_ID || RAPT_HYDROMETER_ID === 'YOUR_HYDROMETER_ID_HERE') {
    return { ...mockFermenterData, beerType };
  }

  const data = await raptFetch(`hydrometer/${RAPT_HYDROMETER_ID}`);

  if (!data) {
    return { ...mockFermenterData, beerType };
  }

  return {
    temperature: data.temperature,
    gravity: data.gravity,
    beerType: beerType, // Use the stored value
    // Mocked data as these are not available from the hydrometer endpoint
    timeRemaining: '3 dager 4 timer',
    totalLiters: 25,
    progress: 70, // Progress could be calculated if we know start/target gravity
  };
}

export async function getBatchInfoData(): Promise<BatchInfoData> {
  // NOTE: RAPT API does not have batch information. This data is mocked.
  return mockBatchInfoData;
}
```

### `src/services/blog-service.ts`
```ts
'use server';

export interface BlogPost {
    id: string;
    title: string;
    summary: string;
    content: string;
    imageUrl: string;
    imageHint: string;
}

// --- Singleton Pattern for In-Memory Database (Next.js Dev-Safe) ---
// This ensures our array of posts is not re-created on every file change in development.
const globalForBlogDb = globalThis as unknown as {
    posts: BlogPost[] | undefined;
};

// Initialize the array only if it doesn't exist.
if (!globalForBlogDb.posts) {
    globalForBlogDb.posts = [
        {
            id: "1",
            title: "Vårt Første NEIPA Brygg",
            summary: "En dypdykk i vår første erfaring med å brygge en New England IPA. Lærdommer, utfordringer og triumfer.",
            content: "Dette er hele blogginnlegget om NEIPA. Vi startet med en ambisjon om å lage den saftigste, mest aromatiske NEIPA-en noensinne. Prosessen var fylt med spenning, fra valg av humle til den nervepirrende ventetiden under gjæring. Vi brukte en kombinasjon av Citra, Mosaic og Galaxy-humle, som ga ølet en eksplosjon av tropiske frukter og sitrusnoter. Resultatet ble et tåkete, gyllent brygg med en myk munnfølelse og en herlig bitterhet som balanserer sødmen. Vi er utrolig stolte, og gleder oss til å brygge dette igjen!",
            imageUrl: "https://images.unsplash.com/photo-1587440292723-45b0a319955c?q=80&w=1200&h=800&fit=crop",
            imageHint: "beer brewing",
        },
        {
            id: "2",
            title: "Temperaturkontroll under gjæring",
            summary: "Hvorfor er stabil temperatur så viktig? Vi deler våre beste tips for perfekt gjæring hver gang.",
            content: "En av de mest kritiske faktorene for et vellykket brygg er temperaturkontroll under gjæring. Uten dette kan man ende opp med usmaker som ødelegger ølet. Vi bruker en RAPT Fermentation Chamber som lar oss holde en presis og stabil temperatur gjennom hele prosessen. Dette sikrer at gjæren jobber optimalt og produserer de ønskede smaksprofilene. For vår NEIPA holdt vi temperaturen på 19°C, noe som er ideelt for å fremheve de fruktige esterne uten å produsere uønskede fuselalkoholer.",
            imageUrl: "https://images.unsplash.com/photo-1628424244383-53e77a1d7469?q=80&w=1200&h=800&fit=crop",
            imageHint: "fermentation equipment",
        },
        {
            id: "3",
            title: "RAPT.io: En Game Changer",
            summary: "Hvordan sanntidsdata fra RAPT.io har forandret måten vi brygger på. En oversikt over verktøyet.",
            content: "RAPT.io har revolusjonert vår bryggeprosess. Med RAPT Hydrometer og Fermentation Chamber får vi sanntidsdata om gravity og temperatur rett til telefonen. Dette betyr at vi ikke lenger trenger å åpne gjæringskaret for å ta prøver, noe som reduserer risikoen for infeksjon. Vi kan følge med på gjæringsforløpet minutt for minutt og vite nøyaktig når ølet er ferdig. Det er et uvurderlig verktøy for enhver seriøs hjemmebrygger.",
            imageUrl: "https://images.unsplash.com/photo-1551288049-bebda4e38f71?q=80&w=1200&h=800&fit=crop",
            imageHint: "data dashboard",
        },
    ];
}
// --- End Singleton Pattern ---

// All functions now directly reference `globalForBlogDb.posts` to ensure they use the single, persistent array.

export async function getPosts(): Promise<BlogPost[]> {
    return globalForBlogDb.posts!;
}

export async function getPost(id: string): Promise<BlogPost | null> {
    return globalForBlogDb.posts!.find(p => p.id === id) ?? null;
}

export async function savePost(data: Omit<BlogPost, 'id'> & { id?: string }): Promise<BlogPost> {
    if (data.id) {
        const existingIndex = globalForBlogDb.posts!.findIndex(p => p.id === data.id);
        if (existingIndex > -1) {
            console.log(`Updating post: ${data.id}`);
            const updatedPost = { ...globalForBlogDb.posts![existingIndex], ...data };
            globalForBlogDb.posts![existingIndex] = updatedPost;
            return updatedPost;
        }
    }
    
    console.log(`Creating new post: ${data.title}`);
    const newPost: BlogPost = {
        ...data,
        id: new Date().toISOString(),
    };
    globalForBlogDb.posts!.unshift(newPost);
    return newPost;
}

export async function deletePost(id: string): Promise<void> {
    const postIndex = globalForBlogDb.posts!.findIndex(p => p.id === id);
    
    if (postIndex > -1) {
        globalForBlogDb.posts!.splice(postIndex, 1);
    } else {
        console.warn(`Post with ID ${id} not found for deletion.`);
        // Throw an error to ensure the client-side catch block is triggered
        throw new Error(`Post with ID ${id} not found.`);
    }
}

export async function addGeneratedPost(post: BlogPost) {
    if (!globalForBlogDb.posts!.find(p => p.id === post.id)) {
        globalForBlogDb.posts!.unshift(post);
    }
}
```

### `src/app/layout.tsx`
```tsx
import type {Metadata} from 'next';
import './globals.css';
import { Toaster } from "@/components/ui/toaster"
import { ThemeProvider } from '@/components/theme-provider';

export const metadata: Metadata = {
  title: 'Brew Crew Dashboard',
  description: 'Dashboard for Prefab Brew Crew',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className="font-body antialiased">
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          {children}
          <Toaster />
        </ThemeProvider>
      </body>
    </html>
  );
}
```

### `src/app/globals.css`
```css
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;500;700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 39 80% 50%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 11 72% 62%;
    --accent-foreground: 0 0% 100%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 39 80% 50%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 100%;
    --sidebar-foreground: 222.2 84% 4.9%;
    --sidebar-primary: 39 80% 50%;
    --sidebar-primary-foreground: 222.2 47.4% 11.2%;
    --sidebar-accent: 210 40% 96.1%;
    --sidebar-accent-foreground: 222.2 47.4% 11.2%;
    --sidebar-border: 214.3 31.8% 91.4%;
    --sidebar-ring: 39 80% 50%;
  }
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 39 80% 50%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 11 72% 62%;
    --accent-foreground: 0 0% 100%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 39 80% 50%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 222.2 84% 4.9%;
    --sidebar-foreground: 210 40% 98%;
    --sidebar-primary: 39 80% 50%;
    --sidebar-primary-foreground: 222.2 47.4% 11.2%;
    --sidebar-accent: 217.2 32.6% 17.5%;
    --sidebar-accent-foreground: 210 40% 98%;
    --sidebar-border: 217.2 32.6% 17.5%;
    --sidebar-ring: 39 80% 50%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
```

### `src/app/page.tsx`
```tsx
import { AppHeader } from "@/components/header";
import { getBatchInfoData, getBrewKettleData, getFermenterData } from "@/services/brewing-service";
import { ThemeToggle } from "@/components/theme-toggle";
import { BrewingDashboard } from "@/components/brewing-dashboard";
import { getPosts } from "@/services/blog-service";
import { Button } from "@/components/ui/button";
import Link from "next/link";

export const dynamic = 'force-dynamic';

export default async function Home() {
  const [brewKettle, fermenter, batchInfo, blogPosts] = await Promise.all([
    getBrewKettleData(),
    getFermenterData(),
    getBatchInfoData(),
    getPosts(),
  ]);

  const brewingData = {
    brewKettle,
    fermenter,
    batchInfo,
  };

  return (
    <div className="flex min-h-screen w-full flex-col bg-background text-foreground">
      <AppHeader />
      <main className="flex-1">
        <BrewingDashboard 
          brewingData={brewingData} 
          blogPosts={blogPosts}
        />
      </main>
      <footer className="py-6 md:px-8 md:py-0 border-t">
        <div className="container flex flex-col items-center justify-between gap-4 md:h-24 md:flex-row">
          <p className="text-center text-sm leading-loose text-muted-foreground md:text-left">
            Bygget med ♥ av Prefab Brew Crew.
          </p>
          <div className="flex items-center gap-2">
            <Button variant="ghost" asChild>
              <Link href="/admin">Admin</Link>
            </Button>
            <ThemeToggle />
          </div>
        </div>
      </footer>
    </div>
  );
}
```

### `src/app/login/page.tsx`
```tsx
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { AppHeader } from '@/components/header';
import { ThemeToggle } from '@/components/theme-toggle';
import Link from 'next/link';
import { Loader2 } from 'lucide-react';

function SubmitButton({ isPending }: { isPending: boolean }) {
  return (
    <Button type="submit" className="w-full" disabled={isPending}>
      {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
      {isPending ? 'Logging in...' : 'Login'}
    </Button>
  );
}

export default function LoginPage() {
  const router = useRouter();
  const [error, setError] = useState<string | null>(null);
  const [isPending, setIsPending] = useState(false);

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setIsPending(true);
    setError(null);

    const formData = new FormData(event.currentTarget);
    const password = formData.get('password');

    const response = await fetch('/api/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ password }),
    });

    const result = await response.json();
    setIsPending(false);

    if (!response.ok) {
      setError(result.error || 'An unknown error occurred.');
    } else {
      router.push('/admin');
      router.refresh();
    }
  };


  return (
    <div className="flex min-h-screen w-full flex-col bg-background text-foreground">
      <AppHeader />
      <main className="flex flex-1 items-center justify-center">
        <form onSubmit={handleSubmit}>
          <Card className="w-full max-w-sm">
            <CardHeader>
              <CardTitle className="text-2xl">Admin Login</CardTitle>
              <CardDescription>
                Enter the administrator password to access the admin dashboard.
              </CardDescription>
            </CardHeader>
            <CardContent className="grid gap-4">
              <div className="grid gap-2">
                <Label htmlFor="password">Password</Label>
                <Input id="password" name="password" type="password" required />
              </div>
              {error && (
                <p className="text-sm font-medium text-destructive">{error}</p>
              )}
            </CardContent>
            <CardFooter>
              <SubmitButton isPending={isPending} />
            </CardFooter>
          </Card>
        </form>
      </main>
      <footer className="py-6 md:px-8 md:py-0 border-t">
        <div className="container flex flex-col items-center justify-between gap-4 md:h-24 md:flex-row">
          <p className="text-center text-sm leading-loose text-muted-foreground md:text-left">
            Bygget med ♥ av Prefab Brew Crew.
          </p>
          <div className="flex items-center gap-2">
            <Button variant="ghost" asChild>
                <Link href="/admin">Admin</Link>
            </Button>
            <ThemeToggle />
          </div>
        </div>
      </footer>
    </div>
  );
}
```

### `src/app/blog/page.tsx`
```tsx
import { AppHeader } from "@/components/header";
import { BlogSection } from "@/components/blog-section";
import { ThemeToggle } from "@/components/theme-toggle";
import { getPosts } from "@/services/blog-service";
import { Button } from "@/components/ui/button";
import Link from "next/link";


export default async function BlogPage() {
  const allBlogPosts = await getPosts();
  return (
    <div className="flex min-h-screen w-full flex-col bg-background text-foreground">
      <AppHeader />
      <main className="flex-1">
          <div className="container pt-12">
            <h1 className="text-4xl md:text-5xl font-bold font-headline mb-8 text-center">Bryggerloggen</h1>
          </div>
          <BlogSection posts={allBlogPosts} />
      </main>
      <footer className="py-6 md:px-8 md:py-0 border-t">
        <div className="container flex flex-col items-center justify-between gap-4 md:h-24 md:flex-row">
          <p className="text-center text-sm leading-loose text-muted-foreground md:text-left">
            Bygget med ♥ av Prefab Brew Crew.
          </p>
          <div className="flex items-center gap-2">
            <Button variant="ghost" asChild>
                <Link href="/admin">Admin</Link>
            </Button>
            <ThemeToggle />
          </div>
        </div>
      </footer>
    </div>
  );
}
```

### `src/app/blog/[id]/page.tsx`
```tsx
import { AppHeader } from "@/components/header";
import { ThemeToggle } from "@/components/theme-toggle";
import Image from "next/image";
import { getPost } from "@/services/blog-service";
import { notFound } from "next/navigation";
import { Button } from "@/components/ui/button";
import Link from "next/link";

export default async function BlogPostPage({ params }: { params: { id: string } }) {
  const post = await getPost(params.id);

  if (!post) {
    notFound();
  }

  return (
    <div className="flex min-h-screen w-full flex-col bg-background text-foreground">
      <AppHeader />
      <main className="flex-1 py-12">
        <article className="container max-w-4xl mx-auto">
            <h1 className="text-4xl md:text-5xl font-bold font-headline mb-4 text-center">{post.title}</h1>
            <p className="text-center text-muted-foreground mb-8 text-lg">{post.summary}</p>
            <div className="w-full aspect-[3/2] relative mb-8">
              <Image
                  src={post.imageUrl}
                  alt={post.title}
                  fill
                  className="w-full h-full object-cover rounded-lg shadow-lg"
                  sizes="(max-width: 768px) 100vw, (max-width: 1200px) 80vw, 1200px"
                  data-ai-hint={post.imageHint}
              />
            </div>
            <div className="prose prose-lg dark:prose-invert max-w-none mx-auto">
               <p>{post.content}</p>
            </div>
        </article>
      </main>
      <footer className="py-6 md:px-8 md:py-0 border-t">
        <div className="container flex flex-col items-center justify-between gap-4 md:h-24 md:flex-row">
          <p className="text-center text-sm leading-loose text-muted-foreground md:text-left">
            Bygget med ♥ av Prefab Brew Crew.
          </p>
          <div className="flex items-center gap-2">
            <Button variant="ghost" asChild>
                <Link href="/admin">Admin</Link>
            </Button>
            <ThemeToggle />
          </div>
        </div>
      </footer>
    </div>
  );
}
```

### `src/app/admin/page.tsx`
```tsx
import { AppHeader } from "@/components/header";
import { ThemeToggle } from "@/components/theme-toggle";
import { getBatchInfoData, getBrewKettleData, getFermenterData } from "@/services/brewing-service";
import { Button } from "@/components/ui/button";
import { AdminDashboard } from "./admin-dashboard";
import { getPosts } from "@/services/blog-service";
import { BlogManagement } from "./blog-management";

function LogoutForm() {
    return (
      <form action="/api/logout" method="POST">
        <Button type="submit" variant="outline">Logout</Button>
      </form>
    );
  }

export default async function AdminPage() {
    const [brewKettle, fermenter, batchInfo, posts] = await Promise.all([
        getBrewKettleData(),
        getFermenterData(),
        getBatchInfoData(),
        getPosts(),
    ]);

    const brewingData = {
        brewKettle,
        fermenter,
        batchInfo,
    };
    
    return (
        <div className="flex min-h-screen w-full flex-col bg-background text-foreground">
          <AppHeader />
          <main className="flex-1 py-8">
            <div className="container space-y-12">
                <div>
                    <div className="flex justify-between items-center mb-8">
                        <h1 className="text-3xl font-bold font-headline">Brewing Dashboard</h1>
                        <LogoutForm />
                    </div>
                    <AdminDashboard brewingData={brewingData} />
                </div>
                <div>
                    <BlogManagement posts={posts} />
                </div>
            </div>
          </main>
          <footer className="py-6 md:px-8 md:py-0 border-t">
            <div className="container flex flex-col items-center justify-between gap-4 md:h-24 md:flex-row">
              <p className="text-center text-sm leading-loose text-muted-foreground md:text-left">
                Bygget med ♥ av Prefab Brew Crew.
              </p>
              <ThemeToggle />
            </div>
          </footer>
        </div>
      );
}
```

### `src/app/admin/admin-dashboard.tsx`
```tsx
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { BrewKettleCard } from "@/components/brew-kettle-card";
import { FermenterCard } from "@/components/fermenter-card";
import { BatchInfoCard } from "@/components/batch-info-card";
import type { BrewingDataOutput } from '@/ai/flows/brewing-data-flow';
import { generateBlogPost } from '@/ai/flows/generate-blog-post-flow';
import { useToast } from '@/hooks/use-toast';

interface AdminDashboardProps {
  brewingData: BrewingDataOutput;
}

export function AdminDashboard({ brewingData }: AdminDashboardProps) {
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();
  const router = useRouter();

  const handleGenerateBlogPost = async () => {
    setIsGenerating(true);
    try {
      const newPost = await generateBlogPost(brewingData);

      // Defensively check if the post object was returned correctly
      if (newPost?.id && newPost?.title) {
        toast({
          title: "Blogginnlegg generert!",
          description: `Omdirigerer til det nye innlegget: ${newPost.title}`,
        });
        router.push(`/blog/${newPost.id}`);
      } else {
        // Fallback if the return value is not as expected.
        // The post is likely saved, so redirecting to the blog list is a safe fallback.
        console.error("Generate blog post flow did not return a valid post object, using fallback.", newPost);
        toast({
          title: "Blogginnlegg generert!",
          description: "Omdirigerer til bloggoversikten.",
        });
        router.push('/blog');
      }
    } catch (error) {
      console.error("Failed to generate blog post:", error);
      toast({
        variant: "destructive",
        title: "Noe gikk galt",
        description: "Kunne ikke generere blogginnlegget. Prøv igjen.",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <div className="space-y-8">
      <div className="grid gap-8 md:grid-cols-1 lg:grid-cols-2">
        <BrewKettleCard data={brewingData.brewKettle} />
        <FermenterCard data={brewingData.fermenter} editable />
      </div>
      <div>
        <BatchInfoCard data={brewingData.batchInfo} onGenerate={handleGenerateBlogPost} isGenerating={isGenerating} />
      </div>
    </div>
  );
}
```

### `src/app/admin/blog-management.tsx`
```tsx
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { PlusCircle, Edit } from 'lucide-react';
import type { BlogPost } from '@/services/blog-service';
import { DeletePostButton } from './blog/delete-post-button';

interface BlogManagementProps {
  posts: BlogPost[];
}

export function BlogManagement({ posts }: BlogManagementProps) {
  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
            <div>
                <CardTitle className="font-headline text-2xl">Manage Blog Posts</CardTitle>
                <CardDescription>Create, edit, and manage your blog posts here.</CardDescription>
            </div>
            <Button asChild>
                <Link href="/admin/blog/new">
                    <PlusCircle className="mr-2 h-4 w-4" />
                    New Post
                </Link>
            </Button>
        </div>
      </CardHeader>
      <CardContent>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Title</TableHead>
              <TableHead className="hidden md:table-cell">Summary</TableHead>
              <TableHead className="text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {posts.map((post) => (
              <TableRow key={post.id}>
                <TableCell className="font-medium">{post.title}</TableCell>
                <TableCell className="hidden md:table-cell max-w-sm truncate">{post.summary}</TableCell>
                <TableCell className="text-right">
                    <div className="flex justify-end items-center gap-2">
                        <Button asChild variant="outline" size="sm">
                            <Link href={`/admin/blog/edit/${post.id}`}>
                            <Edit className="h-4 w-4" />
                            <span className="sr-only">Edit</span>
                            </Link>
                        </Button>
                        <DeletePostButton postId={post.id} />
                    </div>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
}
```

### `src/app/admin/blog/new/page.tsx`
```tsx
import { AppHeader } from "@/components/header";
import { BlogEditor } from "../editor";

export default function NewPostPage() {
  return (
    <div className="flex min-h-screen w-full flex-col bg-background text-foreground">
      <AppHeader />
      <main className="flex-1 py-8">
        <div className="container">
            <h1 className="text-3xl font-bold font-headline mb-8">Create New Post</h1>
            <BlogEditor />
        </div>
      </main>
    </div>
  );
}
```

### `src/app/admin/blog/edit/[id]/page.tsx`
```tsx
import { AppHeader } from "@/components/header";
import { getPost } from "@/services/blog-service";
import { notFound } from "next/navigation";
import { BlogEditor } from "../../editor";

export default async function EditPostPage({ params }: { params: { id: string } }) {
  const post = await getPost(params.id);

  if (!post) {
    notFound();
  }

  return (
    <div className="flex min-h-screen w-full flex-col bg-background text-foreground">
      <AppHeader />
      <main className="flex-1 py-8">
        <div className="container">
            <h1 className="text-3xl font-bold font-headline mb-8">Edit Post</h1>
            <BlogEditor post={post} />
        </div>
      </main>
    </div>
  );
}
```

### `src/app/admin/blog/editor.tsx`
```tsx
'use client';

import { useState } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import type { BlogPost } from '@/services/blog-service';
import { useToast } from '@/hooks/use-toast';
import { Loader2 } from 'lucide-react';

interface BlogEditorProps {
    post?: BlogPost;
}

function SubmitButton({ isNew, isPending }: { isNew: boolean, isPending: boolean }) {
    return (
        <Button type="submit" disabled={isPending}>
            {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {isPending ? (isNew ? 'Creating...' : 'Saving...') : (isNew ? 'Create Post' : 'Save Changes')}
        </Button>
    );
}

export function BlogEditor({ post }: BlogEditorProps) {
    const router = useRouter();
    const { toast } = useToast();
    const [isPending, setIsPending] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const isNewPost = !post;

    const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setIsPending(true);
        setError(null);

        const formData = new FormData(event.currentTarget);
        const data = Object.fromEntries(formData.entries());

        const response = await fetch('/api/posts', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data),
        });

        const result = await response.json();
        setIsPending(false);

        if (!response.ok) {
            setError(result.error || 'An unknown error occurred.');
        } else {
            toast({
                title: 'Success!',
                description: `Post "${result.title}" has been saved.`,
            });
            router.push('/admin');
            router.refresh(); // Ensure the admin page shows the new data
        }
    };

    return (
        <form onSubmit={handleSubmit}>
            <input type="hidden" name="id" value={post?.id || ''} />
            <Card>
                <CardHeader>
                    <CardTitle>{isNewPost ? "New Blog Post" : "Editing Post"}</CardTitle>
                </CardHeader>
                <CardContent className="space-y-6">
                    <div className="space-y-2">
                        <Label htmlFor="title">Title</Label>
                        <Input id="title" name="title" defaultValue={post?.title} required />
                    </div>
                    <div className="space-y-2">
                        <Label htmlFor="summary">Summary</Label>
                        <Textarea id="summary" name="summary" defaultValue={post?.summary} required />
                    </div>
                    <div className="space-y-2">
                        <Label htmlFor="content">Content</Label>
                        <Textarea id="content" name="content" defaultValue={post?.content} required rows={10} />
                    </div>
                    <div className="space-y-2">
                        <Label htmlFor="imageUrl">Image URL</Label>
                        <Input id="imageUrl" name="imageUrl" defaultValue={post?.imageUrl} required />
                    </div>
                    <div className="space-y-2">
                        <Label htmlFor="imageHint">Image Hint (for AI)</Label>
                        <Input id="imageHint" name="imageHint" defaultValue={post?.imageHint} required />
                    </div>
                    {error && <p className="text-destructive">{error}</p>}
                </CardContent>
                <CardFooter className="flex justify-end gap-2">
                    <Button variant="outline" asChild>
                        <Link href="/admin">Cancel</Link>
                    </Button>
                    <SubmitButton isNew={isNewPost} isPending={isPending} />
                </CardFooter>
            </Card>
        </form>
    )
}
```

### `src/app/admin/blog/delete-post-button.tsx`
```tsx
'use client';

import { useState, useTransition } from 'react';
import { useRouter } from 'next/navigation';
import {
  AlertDialog,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog';
import { Button } from '@/components/ui/button';
import { Trash, Loader2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

export function DeletePostButton({ postId }: { postId: string }) {
  const [isPending, startTransition] = useTransition();
  const [isOpen, setIsOpen] = useState(false);
  const { toast } = useToast();
  const router = useRouter();

  const handleDelete = () => {
    startTransition(async () => {
      const response = await fetch(`/api/posts/${postId}`, {
        method: 'DELETE',
      });

      const result = await response.json();

      if (!response.ok) {
        toast({
          variant: "destructive",
          title: "Deletion Failed",
          description: result.error || 'An unknown error occurred.',
        });
      } else {
        toast({
          title: "Success",
          description: result.success,
        });
        setIsOpen(false);
        // Manually trigger a refresh to reflect the deletion
        router.refresh();
      }
    });
  };

  return (
    <AlertDialog open={isOpen} onOpenChange={setIsOpen}>
      <AlertDialogTrigger asChild>
        <Button variant="outline" size="sm" className="text-destructive hover:bg-destructive/10 hover:text-destructive border-destructive/50">
          <Trash className="h-4 w-4" />
          <span className="sr-only">Delete</span>
        </Button>
      </AlertDialogTrigger>
      <AlertDialogContent>
        <AlertDialogHeader>
            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This action cannot be undone. This will permanently delete the blog post.
            </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel disabled={isPending}>Cancel</AlertDialogCancel>
          <Button onClick={handleDelete} variant="destructive" disabled={isPending}>
            {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            Delete
          </Button>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}
```

### `src/app/api/login/route.ts`
```ts
import { NextResponse, type NextRequest } from 'next/server';
import { encrypt } from '@/lib/auth';
import { z } from 'zod';
import { cookies } from 'next/headers';

const ADMIN_PASSWORD = "admin";

const LoginSchema = z.object({
  password: z.string().min(1, "Password is required."),
});

export async function POST(request: NextRequest) {
  const data = await request.json();
  const validatedFields = LoginSchema.safeParse(data);

  if (!validatedFields.success) {
    return NextResponse.json(
      { error: validatedFields.error.errors.map((e) => e.message).join(', ') },
      { status: 400 }
    );
  }

  const { password } = validatedFields.data;

  if (password === ADMIN_PASSWORD) {
    const session = await encrypt({ user: { role: 'admin' } });

    cookies().set('session', session, {
      maxAge: 2 * 60 * 60, // 2 hours
      httpOnly: true,
      path: '/',
      sameSite: 'lax',
      secure: process.env.NODE_ENV === 'production',
    });

    return NextResponse.json({ success: true }, { status: 200 });
  } else {
    return NextResponse.json({ error: 'Invalid password.' }, { status: 401 });
  }
}
```

### `src/app/api/logout/route.ts`
```ts
import { logout } from '@/lib/auth';
import { redirect } from 'next/navigation';
import type { NextRequest } from 'next/server';

export async function POST(request: NextRequest) {
  await logout();
  // The redirect function automatically throws an error, so no need to return a response.
  redirect('/login');
}
```

### `src/app/api/beer-type/route.ts`
```ts
import { NextResponse, type NextRequest } from 'next/server';
import { getSession } from '@/lib/auth';
import { setBeerType } from '@/services/brewing-service';
import { revalidatePath } from 'next/cache';
import { z } from 'zod';

const BeerTypeSchema = z.string().min(1, 'Beer type cannot be empty.');

export async function POST(request: NextRequest) {
  const session = await getSession();
  if (!session?.user || session.user.role !== 'admin') {
    return NextResponse.json({ error: 'Unauthorized.' }, { status: 401 });
  }

  const data = await request.json();
  const validatedFields = BeerTypeSchema.safeParse(data.beerType);

  if (!validatedFields.success) {
    return NextResponse.json(
      { error: validatedFields.error.errors.map((e) => e.message).join(', ') },
      { status: 400 }
    );
  }

  try {
    await setBeerType(validatedFields.data);
    revalidatePath('/admin');
    revalidatePath('/');
    return NextResponse.json({ success: true }, { status: 200 });
  } catch (error) {
    console.error("Failed to update beer type:", error);
    return NextResponse.json({ error: 'Failed to update beer type.' }, { status: 500 });
  }
}
```

### `src/app/api/posts/route.ts`
```ts
import { NextResponse, type NextRequest } from 'next/server';
import { getSession } from '@/lib/auth';
import { savePost } from '@/services/blog-service';
import { revalidatePath } from 'next/cache';
import { z } from 'zod';

const PostSchema = z.object({
  id: z.string().optional().or(z.literal('')),
  title: z.string().min(1, "Title is required."),
  summary: z.string().min(1, "Summary is required."),
  content: z.string().min(1, "Content is required."),
  imageUrl: z.string().url("Must be a valid URL."),
  imageHint: z.string().min(1, "Image hint is required."),
});

export async function POST(request: NextRequest) {
  const session = await getSession();
  if (!session?.user || session.user.role !== 'admin') {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  const data = await request.json();
  const validatedFields = PostSchema.safeParse(data);

  if (!validatedFields.success) {
    return NextResponse.json(
      { error: validatedFields.error.errors.map((e) => e.message).join(', ') },
      { status: 400 }
    );
  }

  try {
    const savedPost = await savePost(validatedFields.data);
    revalidatePath('/admin');
    revalidatePath('/blog');
    if (savedPost?.id) {
      revalidatePath(`/blog/${savedPost.id}`);
    }
    return NextResponse.json(savedPost, { status: 200 });
  } catch (error) {
    console.error("Failed to save post:", error);
    return NextResponse.json({ error: 'Failed to save post.' }, { status: 500 });
  }
}
```

### `src/app/api/posts/[id]/route.ts`
```ts
import { NextResponse, type NextRequest } from 'next/server';
import { getSession } from '@/lib/auth';
import { deletePost } from '@/services/blog-service';
import { revalidatePath } from 'next/cache';

export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  const session = await getSession();
  if (!session?.user || session.user.role !== 'admin') {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  const postId = params.id;
  if (!postId) {
    return NextResponse.json({ error: 'Post ID is missing.' }, { status: 400 });
  }

  try {
    await deletePost(postId);
    revalidatePath('/admin');
    revalidatePath('/blog');
    return NextResponse.json({ success: 'Post deleted successfully.' }, { status: 200 });
  } catch (error) {
    console.error('Failed to delete post:', error);
    const message = error instanceof Error ? error.message : 'An unknown error occurred.';
    return NextResponse.json(
      { error: `An internal error occurred while deleting the post: ${message}` },
      { status: 500 }
    );
  }
}
```

### `src/ai/genkit.ts`
```ts
import {genkit} from 'genkit';
import {googleAI} from '@genkit-ai/googleai';

export const ai = genkit({
  plugins: [googleAI()],
  model: 'googleai/gemini-2.0-flash',
});
```

### `src/ai/dev.ts`
```ts
// Flows will be imported for their side effects in this file.
import './flows/brewing-data-flow';
import './flows/generate-blog-post-flow';
```

### `src/ai/flows/brewing-data-flow.ts`
```ts
'use server';
/**
 * @fileOverview A flow for fetching brewing dashboard data.
 *
 * - getBrewingData - A function that fetches all data for the dashboard.
 * - BrewingDataOutput - The return type for the getBrewingData function.
 * - BrewingDataOutputSchema - The Zod schema for the brewing data output.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';
import {
  getBatchInfoData,
  getBrewKettleData,
  getFermenterData,
} from '@/services/brewing-service';

const BrewKettleDataSchema = z.object({
  temperature: z.number(),
  measuredTemperature: z.number(),
  mode: z.string(),
  power: z.number(),
  timeElapsed: z.string(),
});

const FermenterDataSchema = z.object({
  temperature: z.number(),
  gravity: z.number(),
  beerType: z.string(),
  timeRemaining: z.string(),
  totalLiters: z.number(),
  progress: z.number(),
});

const BatchInfoDataSchema = z.object({
  batchId: z.string(),
  startDate: z.string(),
  endDate: z.string(),
});

export const BrewingDataOutputSchema = z.object({
  brewKettle: BrewKettleDataSchema,
  fermenter: FermenterDataSchema,
  batchInfo: BatchInfoDataSchema,
});
export type BrewingDataOutput = z.infer<typeof BrewingDataOutputSchema>;

export async function getBrewingData(): Promise<BrewingDataOutput> {
  return brewingDataFlow();
}

const brewingDataFlow = ai.defineFlow(
  {
    name: 'brewingDataFlow',
    inputSchema: z.void(),
    outputSchema: BrewingDataOutputSchema,
  },
  async () => {
    // In a real application, you might use tools to fetch from an API.
    // Here we are calling our mock service directly.
    const [brewKettle, fermenter, batchInfo] = await Promise.all([
      getBrewKettleData(),
      getFermenterData(),
      getBatchInfoData(),
    ]);

    return {
      brewKettle,
      fermenter,
      batchInfo,
    };
  }
);
```

### `src/ai/flows/generate-blog-post-flow.ts`
```ts
'use server';
/**
 * @fileOverview A flow for generating a blog post about a finished brew.
 *
 * - generateBlogPost - A function that generates a blog post title, summary, and image.
 * - GenerateBlogPostInput - The input type for the generateBlogPost function.
 * - GenerateBlogPostOutput - The return type for the generateBlogPost function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';
import {
  type BrewingDataOutput,
  BrewingDataOutputSchema,
} from './brewing-data-flow';
import { addGeneratedPost, type BlogPost } from '@/services/blog-service';

export type GenerateBlogPostInput = BrewingDataOutput;

// The flow will now return a smaller object to avoid hitting payload size limits.
const GenerateBlogPostOutputSchema = z.object({
  id: z.string().describe('The unique ID of the newly created blog post.'),
  title: z.string().describe('The title of the newly created blog post.'),
});
export type GenerateBlogPostOutput = z.infer<
  typeof GenerateBlogPostOutputSchema
>;

export async function generateBlogPost(
  input: GenerateBlogPostInput
): Promise<GenerateBlogPostOutput> {
  return generateBlogPostFlow(input);
}

const textGenerationPrompt = ai.definePrompt({
  name: 'generateBlogPostTextPrompt',
  input: {
    schema: z.object({
      beerType: z.string(),
      finalGravity: z.number(),
      brewStartDate: z.string(),
      brewEndDate: z.string(),
    }),
  },
  output: {
    schema: z.object({
      title: z
        .string()
        .describe(
          'A creative and engaging title for a blog post about a successfully completed beer brew. Should be in Norwegian.'
        ),
      summary: z
        .string()
        .describe(
          'A short, compelling summary for the blog post (2-3 sentences). It should mention the beer type and the success of the brew. Should be in Norwegian.'
        ),
      content: z
        .string()
        .describe(
          'The full blog post content, at least 2 paragraphs long. It should elaborate on the brewing journey, mention the beer type, and describe the final result in an engaging way. Should be in Norwegian.'
        ),
    }),
  },
  prompt: `You are a creative content writer for a craft beer brewing blog called "Prefab Brew Crew".
    Your task is to write a blog post title, summary, and full content for a newly completed batch of beer.
    The tone should be enthusiastic, friendly, and a bit nerdy about brewing. The language must be Norwegian.

    Here is the data for the completed brew:
    - Beer Type: {{beerType}}
    - Final Gravity: {{finalGravity}}
    - Brew Start Date: {{brewStartDate}}
    - Brew End Date: {{brewEndDate}}

    Generate a title, a summary, and the full blog post content based on this information.
    The title should be exciting and make people want to read more.
    The summary should briefly describe the journey and the successful result of this {{beerType}}.
    The content should be detailed and engaging.
    `,
});

const generateBlogPostFlow = ai.defineFlow(
  {
    name: 'generateBlogPostFlow',
    inputSchema: BrewingDataOutputSchema,
    outputSchema: GenerateBlogPostOutputSchema,
  },
  async (input) => {
    const [textResponse, imageResponse] = await Promise.all([
      textGenerationPrompt({
        beerType: input.fermenter.beerType,
        finalGravity: input.fermenter.gravity,
        brewStartDate: input.batchInfo.startDate,
        brewEndDate: input.batchInfo.endDate,
      }),
      ai.generate({
        model: 'googleai/gemini-2.0-flash-preview-image-generation',
        prompt: `A professional, high-quality photograph of a freshly poured glass of homemade ${input.fermenter.beerType} beer. The setting is a cozy home brewery.`,
        config: {
          responseModalities: ['TEXT', 'IMAGE'],
        },
      }),
    ]);

    const { output: textOutput } = textResponse;
    if (
      !textOutput ||
      !textOutput.title ||
      !textOutput.summary ||
      !textOutput.content
    ) {
      throw new Error('Failed to generate blog post text.');
    }

    const { media } = imageResponse;
    // Ensure media array exists and has at least one element with a url
    if (!media || !media.url) {
      // Corrected condition
      throw new Error('Failed to generate blog post image.');
    }

    const newPost: BlogPost = {
      id: new Date().toISOString(),
      title: textOutput.title,
      summary: textOutput.summary,
      content: textOutput.content,
      imageUrl: media.url,
      imageHint: `craft beer`,
    };

    // Save the full post object with the large image URI.
    await addGeneratedPost(newPost);

    // Return only the small, serializable object.
    return {
      id: newPost.id,
      title: newPost.title,
    };
  }
);
```

### `src/components/header.tsx`
```tsx
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Beer, Menu } from 'lucide-react';
import { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';

const ConcreteBlockIcon = () => (
  <svg
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="currentColor"
    className="text-muted-foreground/60"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path d="M2 5C2 3.34315 3.34315 2 5 2H19C20.6569 2 22 3.34315 22 5V19C22 20.6569 20.6569 22 19 22H5C3.34315 22 2 20.6569 2 19V5Z" />
    <circle cx="8" cy="12" r="2.5" fill="hsl(var(--background))" />
    <circle cx="16" cy="12" r="2.5" fill="hsl(var(--background))" />
  </svg>
);

const Logo = () => (
  <Link href="/" className="flex items-center gap-2" aria-label="Prefab Brew Crew Home">
    <Beer className="h-8 w-8 text-primary" />
    <ConcreteBlockIcon />
    <span className="text-xl font-bold font-headline tracking-tighter text-foreground">
      Prefab Brew Crew
    </span>
  </Link>
);

export function AppHeader() {
  return (
    <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="container flex h-16 items-center">
        {/* Mobile View */}
        <div className="flex w-full items-center justify-between md:hidden">
          <Sheet>
            <SheetTrigger asChild>
              <Button variant="ghost" size="icon">
                <Menu className="h-5 w-5" />
                <span className="sr-only">Toggle Menu</span>
              </Button>
            </SheetTrigger>
            <SheetContent side="left" className="pr-0 pt-10">
              <div className="flex flex-col gap-6 p-4">
                <Logo />
                <nav className="flex flex-col gap-4 text-lg font-medium">
                  <Link href="#" className="text-foreground/80 hover:text-foreground">Om oss</Link>
                  <Link href="/blog" className="text-foreground/80 hover:text-foreground">Blogg</Link>
                </nav>
              </div>
            </SheetContent>
          </Sheet>
          <div className="flex-1 flex justify-center">
            <Logo />
          </div>
          {/* This spacer element balances the hamburger menu on mobile, ensuring the logo is centered. */}
          <div className="w-10" />
        </div>

        {/* Desktop View */}
        <nav className="hidden w-full items-center justify-between text-sm font-medium md:flex">
          <Link href="#" className="transition-colors hover:text-foreground/80 text-foreground/60">
            Om oss
          </Link>
          <Logo />
          <div className="flex items-center gap-6">
             <Link href="/blog" className="transition-colors hover:text-foreground/80 text-foreground/60">
                Blogg
             </Link>
          </div>
        </nav>
      </div>
    </header>
  );
}
```

### `src/components/brewing-dashboard.tsx`
```tsx
'use client';

import { BrewKettleCard } from "@/components/brew-kettle-card";
import { FermenterCard } from "@/components/fermenter-card";
import { BlogSection, type BlogPost } from "@/components/blog-section";
import type { BrewingDataOutput } from '@/ai/flows/brewing-data-flow';

interface BrewingDashboardProps {
  brewingData: BrewingDataOutput;
  blogPosts: BlogPost[];
}

export function BrewingDashboard({ brewingData, blogPosts }: BrewingDashboardProps) {
  return (
    <>
      <div className="container py-8">
        <div className="grid gap-8 md:grid-cols-1 lg:grid-cols-2 mb-8">
          <BrewKettleCard data={brewingData.brewKettle} />
          <FermenterCard data={brewingData.fermenter} />
        </div>
      </div>
      <div className="container">
        <h2 className="text-3xl font-bold mb-8 text-center font-headline">Fra Bryggerloggen</h2>
      </div>
      <BlogSection posts={blogPosts.slice(0, 3)} showViewAllButton={true} />
    </>
  );
}
```

### `src/components/blog-section.tsx`
```tsx
import Image from "next/image";
import Link from "next/link";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ArrowRight } from "lucide-react";

export interface BlogPost {
  id: string;
  title: string;
  summary: string;
  imageUrl: string;
  imageHint: string;
}

interface BlogSectionProps {
  posts: BlogPost[];
  showViewAllButton?: boolean;
}

export function BlogSection({ posts, showViewAllButton = false }: BlogSectionProps) {
  return (
    <section id="blog" className="container py-12">
      <div className="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
        {posts.map((post) => (
          <Card key={post.id} className="flex flex-col overflow-hidden hover:shadow-lg transition-shadow duration-300">
            <CardHeader className="p-0">
              <div className="w-full aspect-[3/2] relative">
                <Image
                  src={post.imageUrl}
                  alt={post.title}
                  fill
                  className="w-full h-full object-cover"
                  data-ai-hint={post.imageHint}
                />
              </div>
            </CardHeader>
            <CardContent className="p-6 flex-grow">
              <CardTitle className="font-headline text-xl mb-2">{post.title}</CardTitle>
              <p className="text-muted-foreground">{post.summary}</p>
            </CardContent>
            <CardFooter className="p-6 pt-0">
              <Button asChild variant="link" className="p-0 h-auto text-primary hover:text-primary/80">
                <Link href={`/blog/${post.id}`}>
                  Les mer <ArrowRight className="ml-2 h-4 w-4" />
                </Link>
              </Button>
            </CardFooter>
          </Card>
        ))}
      </div>
       {showViewAllButton && (
        <div className="text-center mt-12">
            <Button asChild size="lg">
                <Link href="/blog">Se alle innlegg</Link>
            </Button>
        </div>
      )}
    </section>
  );
}
```

### `src/components/brew-kettle-card.tsx`
```tsx
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Thermometer, Power, Clock, Flame } from "lucide-react";

interface BrewKettleData {
  temperature: number;
  measuredTemperature: number;
  mode: string;
  power: number;
  timeElapsed: string;
}

export function BrewKettleCard({ data }: { data: BrewKettleData }) {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2 font-headline text-2xl">
          <Flame className="text-accent" />
          Brew Kettle
        </CardTitle>
      </CardHeader>
      <CardContent className="grid gap-4 text-lg">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2 text-muted-foreground">
            <Thermometer size={20} />
            <span className="text-base">Temperatur</span>
          </div>
          <span className="font-bold">{data.temperature}°C</span>
        </div>
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2 text-muted-foreground">
            <Thermometer size={20} />
            <span className="text-base">Målt Temperatur</span>
          </div>
          <span className="font-bold">{data.measuredTemperature}°C</span>
        </div>
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2 text-muted-foreground">
            <span className="text-base ml-7">Modus</span>
          </div>
          <span className="font-bold capitalize bg-accent text-accent-foreground px-3 py-1 rounded-full text-sm">{data.mode}</span>
        </div>
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2 text-muted-foreground">
            <Power size={20} />
            <span className="text-base">Strøm</span>
          </div>
          <span className="font-bold">{data.power}W</span>
        </div>
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2 text-muted-foreground">
            <Clock size={20} />
            <span className="text-base">Tid Gått</span>
          </div>
          <span className="font-bold font-mono">{data.timeElapsed}</span>
        </div>
      </CardContent>
    </Card>
  );
}
```

### `src/components/fermenter-card.tsx`
```tsx
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Thermometer, TestTube2, Beer, Timer, Droplets, Loader2 } from "lucide-react";
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';

interface FermenterData {
  temperature: number;
  gravity: number;
  beerType: string;
  timeRemaining: string;
  totalLiters: number;
  progress: number;
}

interface FermenterCardProps {
    data: FermenterData;
    editable?: boolean;
}

function SubmitButton({ isPending }: { isPending: boolean }) {
    return (
        <Button type="submit" size="sm" disabled={isPending}>
            {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            Save
        </Button>
    );
}

function BeerTypeEditor({ currentBeerType }: { currentBeerType: string }) {
    const [beerType, setBeerType] = useState(currentBeerType);
    const [error, setError] = useState<string | null>(null);
    const [isPending, setIsPending] = useState(false);
    const router = useRouter();
    const { toast } = useToast();

    const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setIsPending(true);
        setError(null);

        const response = await fetch('/api/beer-type', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ beerType }),
        });

        const result = await response.json();
        setIsPending(false);

        if (!response.ok) {
            setError(result.error || 'An unknown error occurred.');
        } else {
            toast({ title: 'Success', description: 'Beer type updated.' });
            router.refresh();
        }
    };


    return (
        <form onSubmit={handleSubmit} className="flex items-start gap-2 ml-auto">
            <div className="grid w-full max-w-[180px] items-center gap-1.5">
                <Input
                    id="beerType"
                    name="beerType"
                    value={beerType}
                    onChange={(e) => setBeerType(e.target.value)}
                    className="h-9"
                    aria-label="Beer Type"
                />
                 {error && <p className="text-sm text-destructive mt-1">{error}</p>}
            </div>
            <SubmitButton isPending={isPending} />
        </form>
    );
}

export function FermenterCard({ data, editable = false }: FermenterCardProps) {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2 font-headline text-2xl">
          <TestTube2 className="text-primary" />
          Fermenter
        </CardTitle>
      </CardHeader>
      <CardContent className="grid gap-4 text-lg">
        <div className="flex items-center justify-between gap-4">
          <div className="flex items-center gap-2 text-muted-foreground shrink-0">
            <Beer size={20} />
            <span className="text-base">Øltype</span>
          </div>
          {editable ? (
            <BeerTypeEditor currentBeerType={data.beerType} />
          ) : (
            <span className="font-bold">{data.beerType}</span>
          )}
        </div>
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2 text-muted-foreground">
            <Thermometer size={20} />
            <span className="text-base">Temperatur</span>
          </div>
          <span className="font-bold">{data.temperature}°C</span>
        </div>
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2 text-muted-foreground">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M12 2a7 7 0 0 0-7 7c0 2 1 3.9 3 5.5s3.5 4 4 6.5c.5-2.5 2-4.9 4-6.5s3 3.5 3 5.5a7 7 0 0 0 7-7c0-2-1-3.9-3-5.5s-3.5-4-4-6.5Z"/><path d="M12 12v10"/></svg>
            <span className="text-base">Gravity</span>
          </div>
          <span className="font-bold font-mono">{data.gravity.toFixed(3)}</span>
        </div>
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2 text-muted-foreground">
            <Droplets size={20} />
            <span className="text-base">Totalt</span>
          </div>
          <span className="font-bold">{data.totalLiters}L</span>
        </div>
        <div className="space-y-2 pt-2">
            <div className="flex items-center justify-between text-base">
                <div className="flex items-center gap-2 text-muted-foreground">
                    <Timer size={20} />
                    <span>Tid Igjen</span>
                </div>
                <span className="font-bold">{data.timeRemaining}</span>
            </div>
            <Progress value={data.progress} className="h-2" />
        </div>
      </CardContent>
    </Card>
  );
}
```

### `src/components/batch-info-card.tsx`
```tsx
'use client';

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { CalendarDays, Hash, Sparkles, Loader2 } from "lucide-react";

interface BatchInfoData {
  batchId: string;
  startDate: string;
  endDate: string;
}

interface BatchInfoCardProps {
  data: BatchInfoData;
  onGenerate: () => Promise<void>;
  isGenerating: boolean;
}

export function BatchInfoCard({ data, onGenerate, isGenerating }: BatchInfoCardProps) {
  return (
    <Card className="w-full">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="font-headline text-2xl">Batch Informasjon</CardTitle>
          <Button onClick={onGenerate} disabled={isGenerating}>
            {isGenerating ? (
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            ) : (
              <Sparkles className="mr-2 h-4 w-4" />
            )}
            {isGenerating ? 'Genererer...' : 'Generer Blogginnlegg'}
          </Button>
        </div>
      </CardHeader>
      <CardContent className="grid gap-6 md:grid-cols-3">
        <div className="flex items-center gap-3">
            <Hash className="h-8 w-8 text-muted-foreground" />
            <div>
                <p className="text-sm text-muted-foreground">Batch ID</p>
                <p className="font-bold text-lg">{data.batchId}</p>
            </div>
        </div>
        <div className="flex items-center gap-3">
            <CalendarDays className="h-8 w-8 text-muted-foreground" />
            <div>
                <p className="text-sm text-muted-foreground">Startdato</p>
                <p className="font-bold text-lg">{data.startDate}</p>
            </div>
        </div>
        <div className="flex items-center gap-3">
            <CalendarDays className="h-8 w-8 text-muted-foreground" />
            <div>
                <p className="text-sm text-muted-foreground">Sluttdato</p>
                <p className="font-bold text-lg">{data.endDate}</p>
            </div>
        </div>
      </CardContent>
    </Card>
  );
}
```

(The rest of the component files would follow in the same fashion)